// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getJobListings = `-- name: GetJobListings :many
SELECT
    jl.id,
    jl.title,
    jl.description,
    jl.salary,
    c.name AS company,
    jl.date_posted,
    jl.start_date,
    jl.end_date,
    jl.location,
    jl.field,
    jl.working_hours,
    jl.employment_type
FROM
    job_listing jl
        JOIN
    company c ON jl.company = c.id
`

type GetJobListingsRow struct {
	ID             int32
	Title          string
	Description    string
	Salary         pgtype.Numeric
	Company        string
	DatePosted     pgtype.Date
	StartDate      pgtype.Date
	EndDate        pgtype.Date
	Location       string
	Field          string
	WorkingHours   string
	EmploymentType string
}

func (q *Queries) GetJobListings(ctx context.Context) ([]GetJobListingsRow, error) {
	rows, err := q.db.Query(ctx, getJobListings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetJobListingsRow
	for rows.Next() {
		var i GetJobListingsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Salary,
			&i.Company,
			&i.DatePosted,
			&i.StartDate,
			&i.EndDate,
			&i.Location,
			&i.Field,
			&i.WorkingHours,
			&i.EmploymentType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
